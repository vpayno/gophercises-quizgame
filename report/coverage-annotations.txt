
17     	func main() {
18 MISS		app.RunApp()
19     	}


67     	func InitRandSeed(seed int64, debug bool) {
68     		var b [8]byte
69     	
70     		_, err := crypto_rand.Read(b[:])
71     		if err != nil {
72 MISS			panic("cannot seed math/rand package with cryptographically secure random number generator")
73     		}
74     	
75     		if seed == -1 {
76     			seed = int64(binary.LittleEndian.Uint64(b[:]))
77     		}
78     	
79     		math_rand.Seed(seed)
80     	
81     		if debug {
82     			fmt.Printf("setting seed to: %d\n", seed)
83     			fmt.Println(math_rand.Perm(10))
84     		}
85     	}


38     	func RunApp() {
39 MISS		c := setup()
40     	
41 MISS		showBanner()
42     	
43 MISS		data := loadData(c)
44     	
45 MISS		problems := parseLines(data)
46     	
47 MISS		timer := createTimer(c)
48     	
49 MISS		result := runQuiz(c, problems, timer, os.Stdin)
50     	
51 MISS		showScore(result)
52     	}


149     	func askQuestion(i int, p problem, stdin io.Reader) bool {
150     		reader := bufio.NewReader(stdin)
151     	
152     		for {
153     			fmt.Printf("%d) %s = ", i+1, p.question)
154     	
155     			response, err := reader.ReadString('\n')
156     	
157     			// During tests, we need to trim the trailing newline char.
158     			response = strings.TrimSuffix(response, "\n")
159     	
160     			if err == nil {
161     				return response == p.answer
162     			}
163     	
164 MISS			fmt.Println("error enountered, restarting question.", err)
165     		}
166     	}


118     	func runQuiz(c config, problems []problem, timer *time.Timer, stdin io.Reader) score {
119     		s := score{
120     			points: 0,
121     			max:    len(problems),
122     		}
123     	
124     		fmt.Println()
125     		fmt.Printf("You have %d seconds to answer %d question.\n", c.timeLimit, s.max)
126     		fmt.Println()
127     	
128     		for i, p := range problems {
129     			answerCh := make(chan bool)
130     			go func() {
131     				answerCh <- askQuestion(i, p, stdin)
132     			}()
133     	
134     			select {
135     			case <-timer.C:
136 MISS				fmt.Println()
137 MISS				fmt.Println("Time's up!")
138 MISS				return s
139     			case response := <-answerCh:
140     				if response {
141     					s.points++
142     				}
143     			}
144     		}
145     	
146     		return s
147     	}


